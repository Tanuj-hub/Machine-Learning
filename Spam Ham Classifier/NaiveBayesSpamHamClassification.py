# -*- coding: utf-8 -*-
"""SelfLearning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dd8pkySIr0_z74Ec8WkLvw3tv_ghEzsM
"""

import pandas as pd
import numpy as np
import string
import nltk
from nltk.corpus import stopwords

nltk.download('stopwords')

data = pd.read_csv('spam ham data set.csv', encoding='latin-1')
data.drop_duplicates(inplace=True)
data = data.drop(['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'], axis=1)
data.head()

def process_text(data) :
  #Remove Puntuations from the string
  nopunc = [char for char in data if char not in string.punctuation]
  nopunc = ''.join(nopunc)
  #Remove Stopwords like 'and' 'is' 'are'
  stop_word = [word for word in nopunc.split() if word not in stopwords.words('english')]
  return stop_word

data_array = np.asarray(data)
split = int(0.8 * data_array.shape[0])
train = data_array[:split, :]
test = data_array[split+1: , :]
clean_arr = []
for data in train:  
  val = process_text(data[1])
  clean_arr.append(val)

totalCount = 0
spamArr = {}
hamArr = {}
spam_count = 0
ham_count = 0

for i, msg in enumerate(clean_arr):
  if train[i][0] == 'spam':
    spam_count += 1
    for word in msg:
      if word in spamArr:
        spamArr[word] += 1
      else:
        spamArr[word] = 1
        totalCount += 1 
  else:
    ham_count += 1
    for word in msg:
      if word in hamArr:
        hamArr[word] += 1
      else:
        hamArr[word] = 1
        totalCount += 1

def prediction(data):
  data = process_text(data)
  wordGivSpam = 1
  wordGivHam = 1
  #Using Laplacin Smoothing = 1
  lapSmth = 1
  for word in data:
    if word in spamArr:
      wordGivSpam *= (spamArr[word] + 1)/(len(spamArr) + totalCount)
    else:
      wordGivSpam *= (1)/(len(spamArr) + totalCount)
    if word in hamArr:
      wordGivHam *= (hamArr[word] + 1)/(len(hamArr) + totalCount)
    else:
      wordGivHam *= (1)/(len(hamArr) + totalCount)
  probSpam = wordGivSpam * len(spamArr)/totalCount
  probHam = wordGivHam * len(hamArr)/totalCount
  if(probSpam >= probHam):
    return 'spam'
  else:
    return 'ham'

confMtrx = np.zeros((2,2))

for data in test:
  if(data[0] == 'ham'):
    if prediction(data[1]) == 'ham':
      confMtrx[0][0] += 1
    else:
      confMtrx[0][1] += 1
  else:
    if prediction(data[1]) == 'spam':
      confMtrx[1][1] += 1
    else:
      confMtrx[1][0] += 1

print('Accuracy Percentage : ', (confMtrx[0][0]+ confMtrx[1][1]) / len(test) * 100)